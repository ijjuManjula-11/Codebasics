# -*- coding: utf-8 -*-
"""transportmobility.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UDWErT1rV4u9L0GKeN3w96spIxR-q4pH
"""

import pandas as pd
dim_city = pd.read_csv('dim_city.csv')
print(dim_city.head())
dim_date = pd.read_csv('dim_date.csv')
fact_passenger_summary = pd.read_csv('fact_passenger_summary.csv')
dim_repeat_trip_distribution = pd.read_csv('dim_repeat_trip_distribution.csv')
fact_trips = pd.read_csv('fact_trips.csv')
#driver_rating = pd.read_csv('driver_rating.csv')
city_target = pd.read_csv('city_target_passenger_rating.csv')
monthly_target = pd.read_csv('monthly_target_new_passengers.csv')
monthly_target_trips = pd.read_csv('monthly_target_trips.csv')

dim_repeat_trip_distribution.head()

city_target.head()

dim_city.head()
#dim_date.head()

dim_date.head()

fact_passenger_summary.head()

fact_trips.head()

fact_passenger_summary.head()

fact_trips.head()

monthly_target.head()

monthly_target_trips.head()

dim_city.drop_duplicates()

"""ANALYSING THE DATASETS
1. TOP AND BOTTOM PERFORMING CITITES

"""

import pandas as pd

# Merge fact_trips with dim_city to get city names
merged_data = pd.merge(fact_trips, dim_city, on='city_id', how='inner')

# Group by city and count the total trips (based on trip_id, as each row is a trip)
city_trip_counts = merged_data.groupby(['city_id', 'city_name'])['trip_id'].count().reset_index()

# Rename 'trip_id' column to 'total_trips' for clarity
city_trip_counts.rename(columns={'trip_id': 'total_trips'}, inplace=True)

# Sort the cities by total trips in descending order for top cities
top_3_cities = city_trip_counts.sort_values(by='total_trips', ascending=False).head(3)

# Sort the cities by total trips in ascending order for bottom cities
bottom_3_cities = city_trip_counts.sort_values(by='total_trips', ascending=True).head(3)

# Display the results
print("Top 3 Cities by Total Trips:")
print(top_3_cities)

print("\nBottom 3 Cities by Total Trips:")
print(bottom_3_cities)
import matplotlib.pyplot as plt
import seaborn as sns

# Set a style for better aesthetics
sns.set_theme(style="whitegrid")

# Plot for Top 3 Cities
plt.figure(figsize=(8, 4))  # Reduced plot size
sns.barplot(data=top_3_cities, x='city_name', y='total_trips', palette='viridis')
plt.title('Top 3 Cities by Total Trips', fontsize=14)
plt.xlabel('City Name', fontsize=12)
plt.ylabel('Total Trips', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.tight_layout()
plt.show()

# Plot for Bottom 3 Cities
plt.figure(figsize=(8, 4))  # Reduced plot size
sns.barplot(data=bottom_3_cities, x='city_name', y='total_trips', palette='rocket')
plt.title('Bottom 3 Cities by Total Trips', fontsize=14)
plt.xlabel('City Name', fontsize=12)
plt.ylabel('Total Trips', fontsize=12)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.tight_layout()
plt.show()

"""2. AVERAGE FARE TRIP BY CITY
Calculating the average fare per trip for each city and compare it with the citys average trip distance identify the cities with the highest and lowest average fare per trip to aseess pricing efficiency across locations


"""

import pandas as pd

# Assuming the datasets are already loaded into variables:
# dim_city = pd.read_csv('dim_city.csv')
# fact_trips = pd.read_csv('fact_trips.csv')

# Merge fact_trips with dim_city to get city names
merged_data = pd.merge(fact_trips, dim_city, on='city_id', how='inner')

# Group by city and calculate average fare and average trip distance
city_performance = merged_data.groupby(['city_id', 'city_name']).agg(
    average_fare=('fare_amount', 'mean'),
    average_distance=('distance_travelled(km)', 'mean')
).reset_index()

# Calculate the pricing efficiency by dividing average fare by average distance
city_performance['pricing_efficiency'] = city_performance['average_fare'] / city_performance['average_distance']

# Sort by pricing efficiency to identify highest and lowest performing cities
highest_pricing_efficiency = city_performance.sort_values(by='pricing_efficiency', ascending=False).head(1)
lowest_pricing_efficiency = city_performance.sort_values(by='pricing_efficiency', ascending=True).head(1)

# Display the results
print("City with the highest average fare per trip and lowest trip distance (highest pricing efficiency):")
print(highest_pricing_efficiency[['city_name', 'average_fare', 'average_distance', 'pricing_efficiency']])

print("\nCity with the lowest average fare per trip and highest trip distance (lowest pricing efficiency):")
print(lowest_pricing_efficiency[['city_name', 'average_fare', 'average_distance', 'pricing_efficiency']])

import pandas as pd

merged_data = pd.merge(fact_trips, dim_city, on='city_id', how='inner')

# Group by city, passenger type and calculate average passenger and driver ratings
rating_performance = merged_data.groupby(['city_id', 'city_name', 'passenger_type']).agg(
    average_passenger_rating=('passenger_rating', 'mean'),
    average_driver_rating=('driver_rating', 'mean')
).reset_index()

top_5_highest_ratings = rating_performance.sort_values(by=['average_passenger_rating', 'average_driver_rating'], ascending=False).head(5)

# Sort by average ratings to identify the top 5 cities with lowest ratings
top_5_lowest_ratings = rating_performance.sort_values(by=['average_passenger_rating', 'average_driver_rating'], ascending=True).head(5)

# Display the results for the top 5 cities with highest ratings
print("Top 5 cities with the highest average passenger and driver ratings:")
print(top_5_highest_ratings[['city_name', 'passenger_type', 'average_passenger_rating', 'average_driver_rating']])

# Display the results for the top 5 cities with lowest ratings
print("\nTop 5 cities with the lowest average passenger and driver ratings:")
print(top_5_lowest_ratings[['city_name', 'passenger_type', 'average_passenger_rating', 'average_driver_rating']])

import pandas as pd
import matplotlib.pyplot as plt

# Assuming the datasets are already loaded into variables:
# dim_city = pd.read_csv('dim_city.csv')
# fact_trips = pd.read_csv('fact_trips.csv')

# Convert the date column to datetime format
fact_trips['date'] = pd.to_datetime(fact_trips['date'])

# Extract the year and month from the date column
fact_trips['year'] = fact_trips['date'].dt.year
fact_trips['month'] = fact_trips['date'].dt.month

# Merge fact_trips with dim_city to get city names
merged_data = pd.merge(fact_trips, dim_city, on='city_id', how='inner')

# Group the data by city_id, city_name, and month to calculate total trips
monthly_trips = merged_data.groupby(['city_id', 'city_name', 'year', 'month']).agg(
    total_trips=('trip_id', 'count')
).reset_index()

# Identify peak (max) and low (min) demand months by city
peak_demand = monthly_trips.loc[monthly_trips.groupby('city_name')['total_trips'].idxmax()]
low_demand = monthly_trips.loc[monthly_trips.groupby('city_name')['total_trips'].idxmin()]

# Combine peak and low demand months into a single dataframe for easy comparison
demand_months = pd.merge(peak_demand[['city_name', 'year', 'month', 'total_trips']],
                         low_demand[['city_name', 'year', 'month', 'total_trips']],
                         on='city_name', suffixes=('_peak', '_low'))

# Display the peak and low demand months
print("Peak and Low Demand Months for Each City:")
print(demand_months)

# Optional: Plotting the total trips for each month in each city
plt.figure(figsize=(12, 6))
for city in monthly_trips['city_name'].unique():
    city_data = monthly_trips[monthly_trips['city_name'] == city]
    plt.plot(city_data['month'], city_data['total_trips'], label=city)

plt.title('Total Trips by Month for Each City (Peak and Low Demand)')
plt.xlabel('Month')
plt.ylabel('Total Trips')
plt.legend(title='City')
plt.xticks(range(1, 13))  # Label months
plt.grid(True)
plt.show()

"""5. Weekend vs Weekday Trip Demand City

"""

import pandas as pd
import matplotlib.pyplot as plt

# Assuming the datasets are already loaded into variables:
# dim_city = pd.read_csv('dim_city.csv')
# fact_trips = pd.read_csv('fact_trips.csv')

# Convert the date column to datetime format
fact_trips['date'] = pd.to_datetime(fact_trips['date'])

# Extract the day of the week from the date column (0 = Monday, 6 = Sunday)
fact_trips['day_of_week'] = fact_trips['date'].dt.dayofweek

# Classify days into weekday (0-4) and weekend (5-6)
fact_trips['week_type'] = fact_trips['day_of_week'].apply(lambda x: 'Weekend' if x >= 5 else 'Weekday')

# Merge fact_trips with dim_city to get city names
merged_data = pd.merge(fact_trips, dim_city, on='city_id', how='inner')

# Group the data by city_id, city_name, and week_type (weekend or weekday)
weekend_weekday_trips = merged_data.groupby(['city_id', 'city_name', 'week_type']).agg(
    total_trips=('trip_id', 'count')
).reset_index()

# Pivot the data to separate weekend and weekday trips
pivot_trips = weekend_weekday_trips.pivot_table(index=['city_id', 'city_name'], columns='week_type', values='total_trips', aggfunc='sum').reset_index()

# Display the total trips on weekend vs weekday for each city
print("Weekend vs Weekday Trip Demand by City:")
print(pivot_trips)

# Optional: Plotting the total trips on weekends vs weekdays for each city
plt.figure(figsize=(12, 6))
pivot_trips.set_index('city_name')[['Weekday', 'Weekend']].plot(kind='bar', stacked=True, figsize=(12, 6))
plt.title('Weekend vs Weekday Trip Demand by City')
plt.xlabel('City')
plt.ylabel('Total Trips')
plt.xticks(rotation=45)
plt.legend(title='Trip Type', labels=['Weekday', 'Weekend'])
plt.grid(True)
plt.tight_layout()
plt.show()

"""# 6. REPEAT PASSSENGER FREQUENCY AND CITY CONTRIBUTION ANALYSIS
 . Analysing the frequency of the trips taken by repeat passenger in each city

"""

import pandas as pd
import matplotlib.pyplot as plt
fact_trips_with_city = pd.merge(fact_trips, dim_city[['city_id', 'city_name']], on='city_id', how='left')

repeat_passengers = fact_trips_with_city[fact_trips_with_city['passenger_type'].str.lower() == 'repeat']

# Check if repeat_passengers is empty and print a message if so
if repeat_passengers.empty:
    print("No repeat passengers found in the data.")
else:
    # Step 3: Calculate the number of trips per repeat passenger per city
    repeat_trip_counts = repeat_passengers.groupby(['city_id', 'city_name', 'passenger_id']).size().reset_index(name='num_trips')

    # Step 4: Calculate the frequency of each number of trips (2 trips, 3 trips, etc.)
    trip_frequency = repeat_trip_counts.groupby(['city_id', 'city_name', 'num_trips']).size().reset_index(name='frequency')

    # Step 5: Calculate the percentage of repeat passengers taking a specific number of trips (2 trips, 3 trips, etc.)
    # First, calculate the total number of repeat passengers per city
    total_repeat_passengers = repeat_trip_counts.groupby(['city_id', 'city_name']).size().reset_index(name='total_repeat_passengers')
    trip_frequency = pd.merge(trip_frequency, total_repeat_passengers, on=['city_id', 'city_name'], how='left')

    # Calculate the percentage of passengers taking a specific number of trips
    trip_frequency['percentage'] = (trip_frequency['frequency'] / trip_frequency['total_repeat_passengers']) * 100

    # Step 6: Display the frequency table for each city and percentage of repeat passengers taking 2, 3, etc. trips
    print("Repeat Passenger Trip Frequency Analysis by City:")
    print(trip_frequency)

    # Step 7: Plot the distribution of repeat passenger trips (e.g., percentage of passengers taking 2, 3, 4 trips)
    plt.figure(figsize=(12, 6))

    for city in trip_frequency['city_name'].unique():
        city_data = trip_frequency[trip_frequency['city_name'] == city]
        plt.plot(city_data['num_trips'], city_data['percentage'], label=city, marker='o')

    plt.title('Repeat Passenger Frequency Distribution by City')
    plt.xlabel('Number of Trips')
    plt.ylabel('Percentage of Repeat Passengers (%)')
    plt.legend(title='City')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    # Step 8: Optional - Identify cities with the highest contribution to repeat passengers taking higher trip frequencies (e.g., 3 or more trips)
    high_frequency_cities = trip_frequency[trip_frequency['num_trips'] >= 3]
    high_frequency_cities_summary = high_frequency_cities.groupby('city_name').agg(
        total_high_freq_passengers=('frequency', 'sum')
    ).reset_index

"""7. Monthly target Achievement Analysis

"""

import pandas as pd

# Example data for illustration
fact_trips = pd.DataFrame({
    'trip_id': [1, 2, 3, 4, 5, 6],
    'date': ['2024-01-15', '2024-01-20', '2024-02-12', '2024-02-14', '2024-03-18', '2024-03-19'],
    'city_id': [101, 101, 102, 102, 103, 103],
    'passenger_type': ['New', 'Repeat', 'New', 'Repeat', 'New', 'Repeat'],
    'passenger_rating': [4.5, 4.7, 4.0, 3.8, 4.2, 3.5]
})

dim_city = pd.DataFrame({
    'city_id': [101, 102, 103],
    'city_name': ['City A', 'City B', 'City C'],
    'city_type': ['Tourism', 'Business', 'Tourism']
})

city_target_passenger_rating = pd.DataFrame({
    'city_id': [101, 102, 103],
    'target_rating': [4.5, 4.2, 4.0]
})

monthly_target_new_passenger = pd.DataFrame({
    'month': ['2024-01', '2024-02', '2024-03'],
    'city_id': [101, 102, 103],
    'target_new_passenger': [3, 4, 2]
})

monthly_target_trips = pd.DataFrame({
    'month': ['2024-01', '2024-02', '2024-03'],
    'city_id': [101, 102, 103],
    'target_trips': [5, 6, 4]
})

# Step 1: Preprocess and aggregate actual data
fact_trips['month'] = pd.to_datetime(fact_trips['date']).dt.to_period('M').astype(str)
actual_metrics = fact_trips.groupby(['city_id', 'month']).agg(
    actual_trips=('trip_id', 'count'),
    actual_new_passengers=('passenger_type', lambda x: (x == 'New').sum()),
    actual_avg_rating=('passenger_rating', 'mean')
).reset_index()

# Step 2: Merge targets with actual data
merged_data = actual_metrics.merge(
    city_target_passenger_rating, on='city_id', how='left'
).merge(
    monthly_target_new_passenger, on=['city_id', 'month'], how='left'
).merge(
    monthly_target_trips, on=['city_id', 'month'], how='left'
)

# Step 3: Calculate differences and statuses
merged_data['trip_diff'] = merged_data['actual_trips'] - merged_data['target_trips']
merged_data['trip_status'] = merged_data['trip_diff'].apply(
    lambda x: 'Met' if x == 0 else ('Exceeded' if x > 0 else 'Missed')
)
merged_data['trip_percent_diff'] = (merged_data['trip_diff'] / merged_data['target_trips']) * 100

merged_data['new_passenger_diff'] = (
    merged_data['actual_new_passengers'] - merged_data['target_new_passenger']
)
merged_data['new_passenger_status'] = merged_data['new_passenger_diff'].apply(
    lambda x: 'Met' if x == 0 else ('Exceeded' if x > 0 else 'Missed')
)
merged_data['new_passenger_percent_diff'] = (
    merged_data['new_passenger_diff'] / merged_data['target_new_passenger']
) * 100

merged_data['avg_rating_diff'] = (
    merged_data['actual_avg_rating'] - merged_data['target_rating']
)
merged_data['avg_rating_status'] = merged_data['avg_rating_diff'].apply(
    lambda x: 'Met' if x == 0 else ('Exceeded' if x > 0 else 'Missed')
)
merged_data['avg_rating_percent_diff'] = (
    merged_data['avg_rating_diff'] / merged_data['target_rating']
) * 100

# Step 4: Add city type for pattern analysis
final_data = merged_data.merge(
    dim_city[['city_id', 'city_name', 'city_type']], on='city_id', how='left'
)

# Step 5: Summarize patterns by city type
city_type_analysis = final_data.groupby('city_type').agg(
    avg_trip_diff=('trip_percent_diff', 'mean'),
    avg_new_passenger_diff=('new_passenger_percent_diff', 'mean'),
    avg_rating_diff=('avg_rating_percent_diff', 'mean')
).reset_index()

# Step 6: Display results
print("Monthly Target Achievement Analysis:")
print(final_data[['city_name', 'month', 'trip_status', 'new_passenger_status', 'avg_rating_status']])

print("\nPatterns by City Type:")
print(city_type_analysis)

"""Highest and Lowest Repeat Passenger Rate"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the datasets (adjust file paths as needed)
dim_repeat_trip_distribution = pd.read_csv("dim_repeat_trip_distribution.csv")
fact_passenger_summary = pd.read_csv("fact_passenger_summary.csv")

# Merge the datasets on relevant columns (assuming 'City' and 'Month' are keys)
data = pd.merge(
    dim_repeat_trip_distribution,
    fact_passenger_summary,
    on=["month", "city_id"]
)

# Calculate Repeat Passenger Rate (RPR%)
data["RPR%"] = (data["repeat_passenger_count"] / data["total_passengers"]) * 100

# Aggregate RPR% by City and Month
rpr_summary = data.groupby(["city_id", "month"])["RPR%"].mean().reset_index()

# Calculate average RPR% across 6 months for each city
city_rpr = rpr_summary.groupby("city_id")["RPR%"].mean().reset_index()

# Sort cities to identify top 2 and bottom 2
city_rpr = city_rpr.sort_values(by="RPR%", ascending=False)
top_2 = city_rpr.head(2)
bottom_2 = city_rpr.tail(2)

# Combine top and bottom cities for visualization
top_bottom_cities = pd.concat([top_2, bottom_2])

# Visualization
plt.figure(figsize=(6, 6))
sns.barplot(data=top_bottom_cities, x="city_id", y="RPR%", palette="viridis")
plt.title("Top 2 and Bottom 2 Cities by Repeat Passenger Rate (RPR%)")
plt.ylabel("RPR%")
plt.xlabel("City")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Assuming 'dim_repeat_trip_distribution' and 'fact_passenger_summary' are your actual datasets
# You will load your datasets as DataFrames

# Example:
# dim_repeat_trip_distribution = pd.read_csv("path_to_your_dim_repeat_trip_distribution.csv")
# fact_passenger_summary = pd.read_csv("path_to_your_fact_passenger_summary.csv")

# Merge the two dataframes on 'month' and 'city_id'
data = pd.merge(
    dim_repeat_trip_distribution,
    fact_passenger_summary,
    on=["month", "city_id"]
)

# Calculate the Repeat Passenger Rate (RPR%) as the ratio of repeat_passenger_count to total_passengers
data["RPR%"] = (data["repeat_passenger_count"] / data["total_passengers"]) * 100

# Group by month and calculate the average RPR% for each month across all cities
monthly_rpr = data.groupby("month")["RPR%"].mean().reset_index()

# Sort the months based on RPR% to find the highest and lowest
monthly_rpr_sorted = monthly_rpr.sort_values(by="RPR%", ascending=False)

# Display the month with the highest and lowest RPR%
highest_month = monthly_rpr_sorted.head(1)
lowest_month = monthly_rpr_sorted.tail(1)

print("Month with Highest RPR%:\n", highest_month)
print("\nMonth with Lowest RPR%:\n", lowest_month)

# Visualization: Plot the average RPR% by month
plt.figure(figsize=(6, 6))
sns.barplot(data=monthly_rpr_sorted, x="month", y="RPR%", palette="coolwarm")
plt.title("Repeat Passenger Rate (RPR%) by Month Across All Cities")
plt.ylabel("RPR%")
plt.xlabel("Month")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""FURTHER ANALYSIS"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample data
# Assuming we have a dataset with columns like: city, month, event_type (tourism/business), and demand

# Example data (you should replace this with your actual dataset)
data = {
    'Month': ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
    'Tourism_Demand': [1500, 1800, 2200, 2400, 3000, 3500, 4000, 4500, 5000, 4000, 2800, 2000],
    'Business_Demand': [1000, 1100, 1200, 1300, 1500, 1600, 1700, 1800, 1500, 1400, 1300, 1200],
    'Total_Demand': [2500, 2900, 3400, 3700, 4500, 5100, 5700, 6300, 6500, 5400, 4100, 3200]
}

# Convert data into DataFrame
df = pd.DataFrame(data)

# Set figure size for clarity
plt.figure(figsize=(10, 6))

# Plotting the demand by month for both tourism and business
sns.lineplot(x='Month', y='Tourism_Demand', data=df, marker='o', label='Tourism Demand', color='blue')
sns.lineplot(x='Month', y='Business_Demand', data=df, marker='o', label='Business Demand', color='green')

# Highlight the months with peak tourism demand (just an example)
peak_tourism_months = ['June', 'July', 'August', 'September']
plt.fill_between(df['Month'], df['Tourism_Demand'], where=df['Month'].isin(peak_tourism_months), color='blue', alpha=0.3)

# Customize the plot
plt.title("Tourism vs Business Demand for Ride-Hailing Service")
plt.xlabel("Month")
plt.ylabel("Demand")
plt.xticks(rotation=45)
plt.legend(title="Demand Type")

# Show the plot
plt.tight_layout()
plt.show()

# If you want to plot the total demand by month for comparison:
plt.figure(figsize=(10, 6))
sns.barplot(x='Month', y='Total_Demand', data=df, palette='viridis')
plt.title("Total Ride-Hailing Demand by Month")
plt.xlabel("Month")
plt.ylabel("Total Demand")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

fact_trips.head()

"""𝐃𝐀𝐒𝐇𝐁𝐎𝐀𝐑𝐃 𝐏𝐑𝐄𝐒𝐄𝐍𝐓𝐀𝐓𝐈𝐎𝐍"""

# Merge fact_trips_df with dim_city_df to get city names
import matplotlib.pyplot as plt
merged_df = fact_trips.merge(dim_city, on='city_id', how='left')

# Calculate total distance traveled by city name
distance_by_city = merged_df.groupby('city_name')['distance_travelled(km)'].sum()
print(f"Total Distance Traveled by City:\n{distance_by_city}")

# Plot total distance traveled by city name
distance_by_city.plot(kind='bar', figsize=(10, 6), title="Total Distance Traveled by City")
plt.xlabel("City Name")
plt.ylabel("Total Distance Traveled (km)")
plt.show()

total_revenue = fact_trips['fare_amount'].sum()
print(f"Total Fare Revenue: {total_revenue}")

# Plot
fact_trips.groupby('city_id')['fare_amount'].sum().plot(kind='bar',color='blue', figsize=(10, 6), title="Total Fare Revenue by City")
plt.xlabel("City ID")
plt.ylabel("Fare Revenue")
plt.show()

avg_passenger_rating = fact_trips['passenger_rating'].mean()
avg_driver_rating = fact_trips['driver_rating'].mean()
print(f"Average Passenger Rating: {avg_passenger_rating}")
print(f"Average Driver Rating: {avg_driver_rating}")

# Plot
ratings = fact_trips[['passenger_rating', 'driver_rating']].mean()
ratings.plot(kind='bar', color='green',figsize=(8, 5), title="Average Ratings")
plt.ylabel("Rating")
plt.show()

# Merge fact_passenger_summary_df with dim_city_df to include city names
merged_df = fact_passenger_summary.merge(dim_city, on='city_id', how='left')

# Calculate total new passengers by city name
new_passengers_by_city = merged_df.groupby('city_name')['new_passengers'].sum()
print(f"New Passengers by City:\n{new_passengers_by_city}")

# Plot
new_passengers_by_city.plot(kind='bar', figsize=(10, 6), title="New Passengers by City", color='skyblue')
plt.xlabel("City Name")
plt.ylabel("New Passengers")
plt.show()